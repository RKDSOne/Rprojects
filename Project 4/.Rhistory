CI
# Perform a 5% level test
tstat = (n.x - n.y) / sqrt((x.sd ^ 2 / n.x) + (y.sd ^ 2 / n.y))
pval = (1 - pt(abs(tstat), df.est))
pval
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(abs(test), sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
sim = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
sim.se = sd(sim) / sqrt(sample.size)
count = 0
for (i in 1:1000){
x = rnorm(sample.size, mean = sample.mean, sd = sim.se)
if (mean(x) <= mean(sim)) {
count = count + 1
}
}
return (count / 1000)
}
# Simulate 100 times
sim.pvalue = replicate(100, p.value.sim())
# State at 5% significance
length(sim.pvalue[sim.pvalue > 0.05])
# Define the data
n.x = 400
x.mean = 2635
x.sd = 365
n.y = 500
y.mean = 2887
y.sd = 412
# Get degrees of freedom
df.satterth.approx = function(n.x, n.y, s.x, s.y) {
num = ((s.x ^ 2 / n.x) + (s.y ^ 2 / n.y)) ^ 2
denom = (s.x ^ 4 / ((n.x ^ 2 * (n.x - 1)))) + (s.y ^ 4/(n.y ^ 2 * (n.y - 1)))
return (num / denom)
}
df.est = df.satterth.approx(n.x, n.y, x.sd, y.sd)
# Construct 95% CI for difference in mean
CI = n.x - n.y + c(-1, 1) * qt(1 - 0.05 / 2, df = df.est) * sqrt(x.sd ^ 2 / n.x + y.sd ^ 2 / n.y)
CI
# Perform a 5% level test
tstat = (n.x - n.y) / sqrt((x.sd ^ 2 / n.x) + (y.sd ^ 2 / n.y))
pval = (1 - pt(abs(tstat), df.est))
pval
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(abs(test), sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
sim = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
sim.se = sd(sim) / sqrt(sample.size)
count = 0
for (i in 1:1000){
x = rnorm(sample.size, mean = sample.mean, sd = sim.se)
if (mean(x) <= mean(sim)) {
count = count + 1
}
}
return (count / 1000)
}
# Simulate 100 times
sim.pvalue = replicate(100, p.value.sim())
# State at 5% significance
length(sim.pvalue[sim.pvalue > 0.05]) / 100
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(abs(test), sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
sim = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
sim.se = sd(sim) / sqrt(sample.size)
count = 0
for (i in 1:1000){
x = rnorm(sample.size, mean = sample.mean, sd = sim.se)
if (mean(x) <= mean(sim)) {
count = count + 1
}
}
return (count / 1000)
}
# Simulate 100 times
sim.pvalue = replicate(100, p.value.sim())
# State at 5% significance
sum(sim.pvalue) / 100
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(abs(test), sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
count = 0
for (i in 1:1000){
x = rnorm(sample.size, mean = sample.mean, sd = sim.sd)
if (mean(x) <= 10) {
count = count + 1
}
}
return (count / 1000)
}
# Simulate 100 times
sim.pvalue = replicate(100, p.value.sim())
# State at 5% significance
sum(sim.pvalue) / 100
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(abs(test), sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
count = 0
for (i in 1:1000){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
if (mean(x) <= 10) {
count = count + 1
}
}
return (count / 1000)
}
# Simulate 100 times
sim.pvalue = replicate(100, p.value.sim())
# State at 5% significance
sum(sim.pvalue) / 100
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(abs(test), sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
count = 0
for (i in 1:1000){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
if (mean(x) > 10) {
count = count + 1
}
}
return (count / 1000)
}
# Simulate 100 times
sim.pvalue = replicate(100, p.value.sim())
# State at 5% significance
sum(sim.pvalue) / 100
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(abs(test), sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
count = 0
for (i in 1:1000){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
if (mean(x) > 10) {
count = count + 1
}
}
return (count / 1000)
}
# Simulate 100 times
sim.pvalue = replicate(100, p.value.sim())
# State at 5% significance
sum(sim.pvalue) / 100
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(abs(test), sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
count = 0
for (i in 1:1000){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
if (mean(x) > H0.mean) {
count = count + 1
}
}
return (count / 1000)
}
# Simulate 100 times
sim.pvalue = replicate(100, p.value.sim())
# State at 5% significance
sum(sim.pvalue) / 100
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(test, sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
count = 0
for (i in 1:1000){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
x.test = (H0.mean - mean(x)) / (sd(x) / sqrt(sample.size))
if (x.test > test) {
count = count + 1
}
}
return (count / 1000)
}
# Simulate 100 times
sim.pvalue = replicate(100, p.value.sim())
# State at 5% significance
sum(sim.pvalue) / 100
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(test, sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
x.test = (H0.mean - mean(x)) / (sd(x) / sqrt(sample.size))
x.test
}
# Simulate 100 times
sim.pvalue = replicate(1000, p.value.sim())
# State at 5% significance
length(sim.pvalue[sim.pvalue > test]) / 1000
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(test, sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
x.test = (H0.mean - mean(x)) / (sd(x) / sqrt(sample.size))
x.test
}
# Simulate 100 times
sim.pvalue = replicate(1000, p.value.sim())
# State at 5% significance
length(sim.pvalue[sim.pvalue > test]) / 1000
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(test, sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
x.test = (H0.mean - mean(x)) / (sd(x) / sqrt(sample.size))
x.test
}
# Simulate 100 times
sim.pvalue = replicate(10000, p.value.sim())
# State at 5% significance
length(sim.pvalue[sim.pvalue > test]) / 10000
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(test, sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
x.test = (H0.mean - mean(x)) / (sd(x) / sqrt(sample.size))
x.test
}
# Simulate 100 times
sim = replicate(10000, p.value.sim())
sim.p.value = (1 - pt(mean(sim), sample.size - 1))
sim.p.value
# State at 5% significance
length(sim.pvalue[sim.pvalue > test]) / 10000
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(test, sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
x.test = (H0.mean - mean(x)) / (sd(x) / sqrt(sample.size))
x.test
}
# Simulate 100 times
sim = replicate(10000, p.value.sim())
sim.p.value = (1 - pt(mean(sim), sample.size - 1))
sim.p.value
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(test, sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
x.test = (H0.mean - mean(x)) / (sd(x) / sqrt(sample.size))
x.test
}
# Simulate 100 times
sim = replicate(10000, p.value.sim())
length(sim[sim > test]) / 10000
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(test, sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
x.test = (H0.mean - mean(x)) / (sd(x) / sqrt(sample.size))
x.test
}
# Simulate 100 times
sim = replicate(10000, p.value.sim())
mean(sim[sim > test])
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (H0.mean - sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(test, sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
x.test = (H0.mean - mean(x)) / (sd(x) / sqrt(sample.size))
x.test
}
# Simulate 100 times
sim = replicate(10000, p.value.sim())
mean(sim > test)
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (-H0.mean + sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(test, sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
x.test = (-H0.mean + mean(x)) / (sd(x) / sqrt(sample.size))
x.test
}
# Simulate 100 times
sim = replicate(10000, p.value.sim())
mean(sim > test)
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (-H0.mean + sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(test, sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
x.test = (-H0.mean + mean(x)) / (sd(x) / sqrt(sample.size))
x.test
}
# Simulate 100 times
sim = replicate(10000, p.value.sim())
mean(sim[sim > test])
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (-H0.mean + sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(test, sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
mean(x)
}
# Simulate 100 times
sim = replicate(10000, p.value.sim())
length(sim[sim> H0.mean])
# Define the data
sample.mean = 9.02
sample.sd = 2.22
sample.size = 20
H0.mean = 10
# Compute test statistic
test = (-H0.mean + sample.mean) / (sample.sd / sqrt(sample.size))
test
# Get the p-value using t distribution
p.value = (1 - pt(test, sample.size - 1))
p.value
# Get p-value using monte carlo simulation
p.value.sim = function(){
x = rnorm(sample.size, mean = sample.mean, sd = sample.sd)
mean(x)
}
# Simulate 100 times
sim = replicate(10000, p.value.sim())
1 - length(sim[sim> H0.mean]) / 10000
